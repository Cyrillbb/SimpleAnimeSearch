{"version":3,"sources":["serviceWorker.js","constants.js","actions/actions.js","reducers/Fetcher.js","reducers/Favorite.js","reducers/CategoriesFetcher.js","reducers/TitleFetcher.js","reducers/rootReducer.js","utility.js","Components/ButtonBar/ButtonBar.jsx","Components/List/AnimeCard.jsx","Components/List/AnimeList.jsx","Components/List/FavoritesList.jsx","Components/Header.jsx","Components/List/Categories.jsx","Components/Title.jsx","Components/Main.jsx","index.js"],"names":["Boolean","window","location","hostname","match","queryParts","apiEND","fetchHeader","method","headers","getAnime","query","url","dispatch","type","payload","data","pending","fetch","then","json","offset","toggleFav","id","item","getTitle","initialState","loadedData","penging","pendingMore","favIds","favs","title","rootReducer","combineReducers","results","state","action","concat","favorites","indexOf","filter","categories","debounce","func","delay","inDebounce","context","this","args","arguments","clearTimeout","setTimeout","apply","setLocalStr","ids","length","localStorage","setItem","JSON","stringify","clear","connect","getPop","getTop","getAir","getByName","name","props","className","placeholder","onChange","document","getElementById","value","onClick","AnimeCard","children","more","getMoreRes","getMore","addFav","getTit","useEffect","style","backgroundColor","margin","marginTop","map","key","color","attributes","canonicalTitle","to","src","posterImage","medium","alt","getLcStr","parse","getItem","getCat","categ","search","catName","titleId","pathname","split","pop","averageRating","popularityRank","ageRating","episodeCount","status","synopsis","exact","path","FavoritesList","store","createStore","applyMiddleware","logger","thunk","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.accc736a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const queryParts = {\r\n    apiURL: 'https://kitsu.io/api/edge/anime?',\r\n    nameSearch: '&filter[text]=',\r\n    idSearch: '&filter[id]=',\r\n    topRated: '&sort=ratingRank',\r\n    mostPop: '&sort=popularityRank',\r\n    topAir: '&filter[status]=current&sort=popularityRank',\r\n    resultsNum: 12,\r\n    pageLim: '&page[limit]=',\r\n    pageOff: '&page[offset]=',\r\n    categories: 'https://kitsu.io/api/edge/categories?sort=-totalMediaCount&page[limit]=60&page[offset]=0',\r\n    filter: '&fields[anime]=id,posterImage,titles,canonicalTitle,averageRating,popularityRank,ageRating,episodeCount,status,synopsis',\r\n    categSearch: 'filter[categories]=',    \r\n    idFilter: 'https://kitsu.io/api/edge/anime?&filter[id]='\r\n}\r\n\r\nexport const apiEND = queryParts.pageLim + queryParts.resultsNum + queryParts.filter\r\n\r\nexport const sortTypes = {\r\n    byRating: 'topRated',\r\n    byPop: 'mostPop',\r\n    byTopAir: 'topAir'\r\n}\r\n\r\nexport const fetchHeader = {\r\n    method: 'GET',\r\n    headers: {\r\n        'Accept': 'application/vnd.api+json',\r\n        'Content-Type': 'application/vnd.api+json',\r\n    }\r\n}","import { queryParts, fetchHeader, apiEND } from './../constants';\r\n\r\nexport const GET_MORE = 'GET_MORE'\r\nexport const GET_CATEGORIES = 'GET_CATEGORIES'\r\nexport const TOGGLE_FAVORITE = 'TOGGLE_FAVORITE'\r\nexport const GET_FAV = 'GET_FAV'\r\nexport const GET_ANIME = 'GET_ANIME'\r\nexport const GET_TITLE = 'GET_TITLE'\r\nexport const GET_LOCAL_STR = 'GET_LOCAL_STR'\r\n\r\nexport const getAnime = (query) => {\r\n    const url = queryParts.apiURL + query + apiEND\r\n    return dispatch => {\r\n        dispatch({\r\n            type: GET_ANIME,\r\n            payload: {\r\n                data: [],\r\n                url: '',\r\n                pending: true\r\n            }\r\n        })\r\n        fetch(url, fetchHeader)\r\n            .then(data => data.json())\r\n            .then(json => dispatch({\r\n                type: GET_ANIME,\r\n                payload: {\r\n                    data: json.data,\r\n                    url: url,\r\n                    pending: false,\r\n                    offset: queryParts.resultsNum,\r\n                }\r\n            }))\r\n    }\r\n}\r\n\r\nexport const getMore = (url, offset) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: GET_MORE,\r\n            payload: {\r\n                data: [],\r\n                url: '',\r\n                pendingMore: true\r\n            }\r\n        })\r\n        fetch(url + queryParts.pageOff + offset, fetchHeader)\r\n            .then(data => data.json())\r\n            .then(json => dispatch({\r\n                type: GET_MORE,\r\n                payload: {\r\n                    data: json.data,\r\n                    url: url,\r\n                    pendingMore: false,\r\n                    offset: offset + queryParts.resultsNum\r\n                }\r\n            }))\r\n    }\r\n}\r\n\r\nexport const toggleFav = (id, item) => {\r\n    return {\r\n        type: TOGGLE_FAVORITE,\r\n        payload: {\r\n            id: id,\r\n            item: item\r\n        }\r\n    }\r\n}\r\n\r\nexport const getLocalStr = () => {\r\n    return {\r\n        type: GET_LOCAL_STR,\r\n        payload: {\r\n            favIds: JSON.parse(localStorage.getItem('ids')),\r\n            favs: JSON.parse(localStorage.getItem('favs'))\r\n        }\r\n    }\r\n}\r\n\r\nexport const getCateg = () => {\r\n    return dispatch => {\r\n        fetch(queryParts.categories)\r\n            .then(data => data.json())\r\n            .then(json => dispatch({\r\n                type: GET_CATEGORIES,\r\n                payload: json.data\r\n            }))\r\n    }\r\n}\r\n\r\nexport const getTitle = (id) => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: GET_TITLE,\r\n            payload: {\r\n                id: id,\r\n                pending: true,\r\n                data: {},\r\n            }\r\n        })\r\n        fetch(queryParts.apiURL + queryParts.idSearch + id + queryParts.filter)\r\n            .then(data => data.json())\r\n            .then(json => dispatch({\r\n                type: GET_TITLE,\r\n                payload: {\r\n                    id: id,\r\n                    pending: false,\r\n                    data: json.data[0],\r\n                }\r\n            }))\r\n    }\r\n}","import { GET_MORE, GET_ANIME } from \"../actions/actions\"\r\n\r\n\r\nconst initialState = {\r\n    url: '',\r\n    loadedData: [],\r\n    penging: true,\r\n    pendingMore: false,\r\n    offset: 0,\r\n}\r\n\r\nexport const fetcher = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_ANIME):\r\n            return (\r\n                {\r\n                    url: action.payload.url,\r\n                    loadedData: action.payload.data,\r\n                    pending: action.payload.pending,\r\n                    offset: action.payload.offset,\r\n                }\r\n            )\r\n        case (GET_MORE):\r\n            return (\r\n                {\r\n                    url: action.payload.url,\r\n                    loadedData: state.loadedData.concat(action.payload.data),\r\n                    pendingMore: action.payload.pendingMore,\r\n                    offset: action.payload.offset,\r\n                }\r\n            )\r\n        default:\r\n            return state\r\n    }\r\n}","\r\nimport { TOGGLE_FAVORITE, GET_LOCAL_STR } from './../actions/actions';\r\n\r\nconst initialState = {\r\n    favIds: [],\r\n    favs: []\r\n}\r\n\r\nexport const favorite = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (TOGGLE_FAVORITE):\r\n            if (state.favIds.indexOf(action.payload.id) === -1) {\r\n                return {\r\n                    favIds: [...state.favIds, action.payload.id],\r\n                    favs: [...state.favs, action.payload.item]\r\n                }\r\n            }\r\n            else {\r\n                return {\r\n                    favIds: state.favIds.filter(id => id !== action.payload.id),\r\n                    favs: state.favs.filter(item => item.id !== action.payload.id)\r\n                }\r\n            }\r\n        case (GET_LOCAL_STR):\r\n            return (\r\n                {\r\n                    favIds: action.payload.favIds,\r\n                    favs: action.payload.favs\r\n                }\r\n            )\r\n        default:\r\n            return state\r\n    }\r\n}","import { GET_CATEGORIES } from \"../actions/actions\"\r\n\r\nconst initialState = []\r\n\r\nexport const CategoriesFetcher = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case (GET_CATEGORIES):\r\n            return (\r\n                action.payload\r\n            )\r\n        default:\r\n            return state\r\n    }\r\n}","import { GET_TITLE } from \"../actions/actions\"\r\n\r\nconst initialState = {\r\n    title: {},\r\n    pending: true,\r\n    id: '',\r\n}\r\n\r\nexport const TitleFetcher = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case(GET_TITLE):\r\n        return (            \r\n                 {\r\n                     id: action.payload.id,\r\n                     pending: action.payload.pending,\r\n                     title: action.payload.data\r\n                 }            \r\n        )\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { fetcher } from './Fetcher';\r\nimport { favorite } from './Favorite';\r\nimport { CategoriesFetcher } from './CategoriesFetcher';\r\nimport { TitleFetcher } from './TitleFetcher';\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    results: fetcher,\r\n    favorites: favorite,\r\n    categories: CategoriesFetcher,\r\n    title: TitleFetcher    \r\n})","export const debounce = (func, delay) => {\r\n  let inDebounce\r\n  return function () {\r\n    const context = this\r\n    const args = arguments\r\n    clearTimeout(inDebounce)\r\n    inDebounce = setTimeout(() => func.apply(context, args), delay)\r\n  }\r\n}\r\n\r\nexport const setLocalStr = (ids, favs) => {\r\n  if (ids.length > 0) {\r\n    localStorage.setItem('ids', JSON.stringify(ids))\r\n    localStorage.setItem('favs', JSON.stringify(favs))\r\n  }\r\n  else {\r\n    localStorage.clear()\r\n  }\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getAnime } from \"./../../actions/actions\";\r\nimport { queryParts } from \"./../../constants\";\r\nimport { debounce } from \"./../../utility\";\r\nimport \"./ButtonBar.css\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction ButtonBar(props) {\r\n  return (\r\n    <div className=\"ButtonBar\" id=\"btnBar\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"ButtonBar__input\"\r\n        id=\"search\"\r\n        placeholder=\"anime search\"\r\n        onChange={debounce(() => {\r\n          props.getByName(\r\n            queryParts.nameSearch + document.getElementById(\"search\").value\r\n          );\r\n        }, 1000)}\r\n      />\r\n      <button className=\"ButtonBar__button\" onClick={props.getPop}>\r\n        Most Popular\r\n      </button>\r\n      <button className=\"ButtonBar__button\" onClick={props.getTop}>\r\n        Top Rated\r\n      </button>\r\n      <button className=\"ButtonBar__button\" onClick={props.getAir}>\r\n        Top Airing\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getPop: () => dispatch(getAnime(queryParts.mostPop)),\r\n    getTop: () => dispatch(getAnime(queryParts.topRated)),\r\n    getAir: () => dispatch(getAnime(queryParts.topAir)),\r\n    getByName: (name) => dispatch(getAnime(name)),\r\n  };\r\n};\r\n\r\nButtonBar.propTypes = {\r\n  getPop: PropTypes.func,\r\n  getTop: PropTypes.func,\r\n  getAir: PropTypes.func,\r\n  getByName: PropTypes.func,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ButtonBar);\r\n","import React from 'react'\r\nimport './AnimeCard.css'\r\n\r\nexport default function AnimeCard(props) {\r\n    return (\r\n        <div className='AnimeCard'>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getMore, toggleFav } from \"../../actions/actions\";\r\nimport AnimeCard from \"./AnimeCard\";\r\nimport { setLocalStr } from \"../../utility\";\r\nimport { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { getTitle } from \"./../../actions/actions\";\r\nimport \"./AnimeList.css\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction AnimeList(props) {  \r\n  useEffect(() => setLocalStr(props.favIds, props.favorites));\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"#001f3f\" }}>\r\n      <div className=\"AnimeList\">\r\n        {props.pending ? (\r\n          <div\r\n            className=\"loader\"\r\n            style={{ margin: \"auto\", marginTop: \"150px\" }}\r\n          ></div>\r\n        ) : (\r\n            props.results.map((item) => (\r\n              <AnimeCard key={item.id} id={item.id}>\r\n                <h3 className=\"AnimeCard__h3\">\r\n                  {props.favIds.indexOf(item.id) === -1 ? (\r\n                    <i\r\n                      className=\"far fa-star\"\r\n                      style={{ color: \"yellow\" }}\r\n                      onClick={() => {\r\n                        props.addFav(item.id, item);\r\n                      }}\r\n                    ></i>\r\n                  ) : (\r\n                      <i\r\n                        className=\"fas fa-star\"\r\n                        style={{ color: \"yellow\" }}\r\n                        onClick={() => {\r\n                          props.addFav(item.id, item);\r\n                        }}\r\n                      ></i>\r\n                    )}\r\n                  {item.attributes.canonicalTitle}\r\n                </h3>\r\n                <Link to={\"/SimpleAnimeSearch/\" + item.id}>\r\n                  <img\r\n                    className=\"img\"\r\n                    onClick={() => props.getTit(item.id)}\r\n                    src={item.attributes.posterImage.medium}\r\n                    alt=\"\"\r\n                  />\r\n                </Link>\r\n              </AnimeCard>\r\n            ))\r\n          )}\r\n      </div>\r\n      {props.more ? (\r\n        <div className=\"loader\" style={{ margin: \"auto\" }}></div>\r\n      ) : (\r\n          <button\r\n            className=\"AnimeList__btn\"\r\n            style={{ marginTop: \"150px\" }}\r\n            onClick={() => {              \r\n              props.getMoreRes(props.url, props.offset);\r\n            }}\r\n          >\r\n            Show More\r\n          </button>\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    results: [...state.results.loadedData],\r\n    url: state.results.url,\r\n    favorites: [...state.favorites.favs],\r\n    favIds: [...state.favorites.favIds],\r\n    pending: state.results.pending,\r\n    more: state.results.pendingMore,\r\n    offset: state.results.offset,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getMoreRes: (url, offset) => dispatch(getMore(url, offset)),\r\n    addFav: (id, item) => dispatch(toggleFav(id, item)),\r\n    getTit: (id) => dispatch(getTitle(id)),\r\n  };\r\n};\r\n\r\nAnimeList.propTypes = {\r\n  results: PropTypes.array,\r\n  url: PropTypes.string,\r\n  favorites: PropTypes.array,\r\n  favIds: PropTypes.array,\r\n  pending: PropTypes.bool,\r\n  more: PropTypes.bool,\r\n  getMoreRes: PropTypes.func,\r\n  addFav: PropTypes.func,\r\n  getTit: PropTypes.func,\r\n  offset: PropTypes.number,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AnimeList);","import React, { useEffect } from \"react\";\r\nimport { toggleFav, getTitle } from \"./../../actions/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { setLocalStr } from \"../../utility\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Favs.css\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction FavoriresList(props) {\r\n  useEffect(() => setLocalStr(props.favIds, props.favorites));\r\n\r\n  return (\r\n    <div className=\"Favs\">\r\n      {props.favorites.map((item) => (\r\n        <div className=\"Favs__card\" key={item.id}>\r\n          <i\r\n            className=\"fas fa-star\"\r\n            style={{ color: \"yellow\" }}\r\n            onClick={() => {\r\n              props.toggleFav(item.id, item);\r\n            }}\r\n          ></i>\r\n          <Link\r\n            className=\"Favs__card__link\"\r\n            to={\"/SimpleAnimeSearch/\" + item.id}\r\n          >\r\n            <h3 className=\"cardH\" onClick={() => props.getTit(item.id)}>\r\n              {item.attributes.canonicalTitle}\r\n            </h3>\r\n          </Link>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    favorites: [...state.favorites.favs],\r\n    favIds: [...state.favorites.favIds],\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    toggleFav: (id) => dispatch(toggleFav(id)),\r\n    getTit: (id) => dispatch(getTitle(id)),\r\n  };\r\n};\r\n\r\nFavoriresList.propTypes = {\r\n  favorites: PropTypes.array,\r\n  favIds: PropTypes.array,\r\n  toggleFav: PropTypes.func,\r\n  getTit: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriresList);\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { getAnime, getLocalStr, getCateg } from \"./../actions/actions\";\r\nimport { queryParts } from \"./../constants\";\r\nimport \"./Header.css\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction Header(props) {\r\n  useEffect(() => {\r\n    props.getPop();\r\n    props.getCat();\r\n    if (localStorage.getItem(\"ids\") && localStorage.getItem(\"favs\")) {\r\n      props.getLcStr();\r\n    }\r\n  }, [props]);\r\n\r\n  const handleHide = () => {\r\n    if (\r\n      document.getElementById(\"nav\").className === \"header__nav\") {\r\n      document.getElementById(\"nav\").className = \"header__nav--responsive\";\r\n    } else if (\r\n      document.getElementById(\"nav\").className === \"header__nav--responsive\") {\r\n      document.getElementById(\"nav\").className = \"header__nav\";\r\n    }    \r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h3 className=\"header__h3\">\r\n        Simple Anime Search\r\n        <i className=\"fas fa-bars\" id=\"bars\" onClick={handleHide}></i>\r\n      </h3>\r\n      <nav className=\"header__nav\" id=\"nav\">\r\n        <Link className=\"header__nav__Link\" to=\"/SimpleAnimeSearch\">\r\n          Discover Anime\r\n        </Link>\r\n        <Link className=\"header__nav__Link\" to=\"/SimpleAnimeSearch/categories\">\r\n          Browse popular categories\r\n        </Link>\r\n        <Link className=\"header__nav__Link\" to=\"/SimpleAnimeSearch/favorites\">\r\n          Favorites\r\n        </Link>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getPop: () => dispatch(getAnime(queryParts.mostPop)),\r\n    getLcStr: () => dispatch(getLocalStr()),\r\n    getCat: () => dispatch(getCateg()),\r\n  };\r\n};\r\n\r\nHeader.propTypes = {\r\n  getPop: PropTypes.func,\r\n  getLcStr: PropTypes.func,\r\n  getCat: PropTypes.func,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Header);\r\n","import React from 'react'\r\nimport { getAnime } from './../../actions/actions';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { queryParts } from './../../constants';\r\nimport './Categories.css'\r\nimport { PropTypes } from 'prop-types';\r\n\r\nfunction Categories(props) {\r\n    return (\r\n        <div className=\"Cats\">\r\n            {props.categ.map(item =>\r\n                <Link className='Cats__link' key={item.id} to='/SimpleAnimeSearch'\r\n                    onClick={\r\n                        () => props.search(queryParts.categSearch + item.attributes.title + queryParts.mostPop)}>\r\n                    {item.attributes.title}</Link>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        categ: state.categories,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        search: (catName) => dispatch(getAnime(catName))\r\n    }\r\n}\r\n\r\nCategories.propTypes = {\r\n    categ: PropTypes.array,\r\n    search: PropTypes.func\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Categories)","import React from \"react\";\r\nimport { toggleFav, getTitle } from \"./../actions/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { setLocalStr } from \"../utility\";\r\nimport \"./Title.css\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nfunction Title(props) {\r\n  useEffect(() => setLocalStr(props.favIds, props.favorites));\r\n  useEffect(() => {\r\n    if (!props.titleId) {\r\n      let id = window.location.pathname.split(\"/\").pop();\r\n      props.getTit(id);\r\n    }\r\n  }, [props]);\r\n\r\n  return (\r\n    <div className=\"TitleBox\">\r\n      {props.pending ? (\r\n        <div\r\n          className=\"loader\"\r\n          style={{ margin: \"auto\", marginTop: \"150px\" }}\r\n        ></div>\r\n      ) : (\r\n        <div className=\"TitleBox__info\">\r\n          <img\r\n            className=\"TitleBox__info__img\"\r\n            src={props.title.attributes.posterImage.medium}\r\n            alt=\"\"\r\n          />\r\n          <div className=\"TitleBox__info__text\">\r\n            <h3 className=\"cardH\">\r\n              {props.favIds.indexOf(props.title.id) === -1 ? (\r\n                <i\r\n                  className=\"far fa-star\"\r\n                  style={{ color: \"yellow\" }}\r\n                  onClick={() => {\r\n                    props.addFav(props.title.id, props.title);\r\n                  }}\r\n                ></i>\r\n              ) : (\r\n                <i\r\n                  className=\"fas fa-star\"\r\n                  style={{ color: \"yellow\" }}\r\n                  onClick={() => {\r\n                    props.addFav(props.title.id, props.title);\r\n                  }}\r\n                ></i>\r\n              )}\r\n              {props.title.attributes.canonicalTitle}\r\n            </h3>\r\n            <p>Avrage Rating: {props.title.attributes.averageRating}</p>\r\n            <p>Popularity rank: {props.title.attributes.popularityRank}</p>\r\n            <p>Age rating: {props.title.attributes.ageRating}</p>\r\n            <p>Number of episodes: {props.title.attributes.episodeCount}</p>\r\n            <p>Status: {props.title.attributes.status}</p>\r\n\r\n            <p className=\"descHide\" id={props.title.id + \"desc\"}>\r\n              Synopsis:\r\n            </p>\r\n            <p>{props.title.attributes.synopsis}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    title: state.title.title,\r\n    favorites: [...state.favorites.favs],\r\n    favIds: [...state.favorites.favIds],\r\n    pending: state.title.pending,\r\n    titleId: state.title.id,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addFav: (id, item) => dispatch(toggleFav(id, item)),\r\n    getTit: (id) => dispatch(getTitle(id)),\r\n  };\r\n};\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.object,\r\n  favorites: PropTypes.array,\r\n  favIds: PropTypes.array,\r\n  pending: PropTypes.bool,\r\n  titleId: PropTypes.string,\r\n  addFav: PropTypes.func,\r\n  getTit: PropTypes.func,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Title);\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport ButtonBar from \"./ButtonBar/ButtonBar\";\r\nimport AnimeList from \"./List/AnimeList\";\r\nimport FavoritesList from \"./List/FavoritesList\";\r\nimport Header from \"./Header\";\r\nimport Categories from \"./List/Categories\";\r\nimport Title from \"./Title\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./Main.css\";\r\n\r\nfunction Main(props) {\r\n  return (\r\n    <div className=\"main\">\r\n      <BrowserRouter>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/SimpleAnimeSearch\">\r\n            <ButtonBar />\r\n            <AnimeList />\r\n          </Route>\r\n          <Route exact path=\"/SimpleAnimeSearch/favorites\">\r\n            <FavoritesList />\r\n          </Route>\r\n          <Route exact path=\"/SimpleAnimeSearch/categories\">\r\n            <Categories />\r\n          </Route>\r\n          <Route path={\"/SimpleAnimeSearch/\" + props.titleId}>\r\n            <Title />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    titleId: state.title.id,\r\n  };\r\n};\r\n\r\nMain.propTypes = {\r\n  titleId: PropTypes.string\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Main);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { rootReducer } from './reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport Main from './Components/Main';\n\nconst store = createStore(rootReducer, applyMiddleware(logger, thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n     <Main />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}